msgid ""
msgstr ""
"Project-Id-Version: Tutorial v3.6 RU\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: SER[G]ANT <rzn.dsa@gmail.com>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.4.2\n"

#: tform1.btnok.caption
msgctxt "tform1.btnok.caption"
msgid "OK"
msgstr "Подтвердить"

#: tform1.button1.caption
msgctxt "tform1.button1.caption"
msgid "Next"
msgstr "Дальше"

#: tform1.button1.hint
msgid "Click this to continue!!!"
msgstr "Нажмите для продолжения!!!"

#: tform1.edtpassword.hint
msgid "Use this to go imeadiatly to the step you want to try"
msgstr "Введите пароль для немедленного перехода к нужному вам шагу"

#: tform1.label1.caption
msgid "Password"
msgstr "Пароль"

#: tform10.button3.caption
msgid "Restart game"
msgstr "Перезапуск игры"

#: tform10.button4.caption
msgctxt "tform10.button4.caption"
msgid "Attack"
msgstr "Атака"

#: tform10.button5.caption
msgctxt "tform10.button5.caption"
msgid "Attack"
msgstr "Атака"

#: tform10.button6.caption
msgctxt "tform10.button6.caption"
msgid "Restart game and autoplay"
msgstr "Случайная игра"

#: tform10.button7.caption
msgctxt "tform10.button7.caption"
msgid "Attack"
msgstr "Атака"

#: tform10.button8.caption
msgctxt "tform10.button8.caption"
msgid "Attack"
msgstr "Атака"

#: tform10.caption
msgid "Step 9"
msgstr "Шаг 9"

#: tform10.label10.caption
msgctxt "tform10.label10.caption"
msgid "Health: 500"
msgstr "Здоровье: 500"

#: tform10.label2.caption
msgctxt "tform10.label2.caption"
msgid "Health:"
msgstr "Здоровье:"

#: tform10.label3.caption
msgid "Player 1: Dave"
msgstr "Союзник1"

#: tform10.label4.caption
msgctxt "tform10.label4.caption"
msgid "Health: 100"
msgstr "Здоровье: 100"

#: tform10.label5.caption
msgid "Player 2: Eric"
msgstr "Союзник2"

#: tform10.label6.caption
msgctxt "tform10.label6.caption"
msgid "Health: 100"
msgstr "Здоровье: 100"

#: tform10.label7.caption
msgid "C. Player 3: HAL"
msgstr "Враг1"

#: tform10.label8.caption
msgctxt "tform10.label8.caption"
msgid "Health: 500"
msgstr "Здоровье: 500"

#: tform10.label9.caption
msgid "C. Player 4: KITT"
msgstr "Враг2"

#: tform2.button1.caption
msgctxt "tform2.button1.caption"
msgid "Next"
msgstr "Дальше"

#: tform2.button2.caption
msgctxt "tform2.button2.caption"
msgid "Hit me"
msgstr "Удар"

#: tform2.caption
msgid "Step 2"
msgstr "Шаг 2"

#: tform2.label2.caption
msgctxt "tform2.label2.caption"
msgid "Health:"
msgstr "Здоровье:"

#: tform2.speedbutton1.caption
msgctxt "tform2.speedbutton1.caption"
msgid "Skip"
msgstr "Пропустить"

#: tform3.button1.caption
msgctxt "tform3.button1.caption"
msgid "Next"
msgstr "Дальше"

#: tform3.button2.caption
msgctxt "tform3.button2.caption"
msgid "Hit me"
msgstr "Удар"

#: tform3.caption
msgid "Step 3"
msgstr "Шаг 3"

#: tform3.speedbutton1.caption
msgctxt "tform3.speedbutton1.caption"
msgid "Skip"
msgstr "Пропустить"

#: tform4.button1.caption
msgctxt "tform4.button1.caption"
msgid "OK"
msgstr "Подтвердить"

#: tform4.caption
msgid "Tutorial End"
msgstr "Конец обучения"

#: tform4.label1.caption
msgid "Well done, you've completed the tutorial of Cheat Engine."
msgstr "Поздравляю, вы успешно завершили учебное руководство по Cheat Engine."

#: tform4.label2.caption
msgid "Just play around with the tutorial and learn how the other scanmethods work."
msgstr "Просто поиграйтесь с руководством и узнайте, как работают другие методы поиска."

#: tform4.label3.caption
msgid "And you can always check out the Cheat Engine Forum for useful information and ask for help"
msgstr "И вы всегда можете найти полезную информацию или обратиться за помощью на форуме Cheat Engine"

#: tform4.label4.caption
msgid "Cheat Engine Forum"
msgstr "Форум Cheat Engine"

#: tform5.button1.caption
msgid "Fire"
msgstr "Огонь"

#: tform5.button2.caption
msgctxt "tform5.button2.caption"
msgid "Next"
msgstr "Дальше"

#: tform5.button3.caption
msgctxt "tform5.button3.caption"
msgid "Hit me"
msgstr "Удар"

#: tform5.caption
msgid "Step 4"
msgstr "Шаг 4"

#: tform5.label2.caption
msgid "Ammo"
msgstr "Патроны:"

#: tform5.label3.caption
msgctxt "tform5.label3.caption"
msgid "Health:"
msgstr "Здоровье:"

#: tform5.speedbutton1.caption
msgctxt "tform5.speedbutton1.caption"
msgid "Skip"
msgstr "Пропустить"

#: tform6.button1.caption
msgctxt "tform6.button1.caption"
msgid "Change value"
msgstr "Изменить значение"

#: tform6.button2.caption
msgctxt "tform6.button2.caption"
msgid "Next"
msgstr "Дальше"

#: tform6.caption
msgid "Step 5"
msgstr "Шаг 5"

#: tform6.speedbutton1.caption
msgctxt "tform6.speedbutton1.caption"
msgid "Skip"
msgstr "Пропустить"

#: tform7.button1.caption
msgctxt "tform7.button1.caption"
msgid "Change value"
msgstr "Изменить значение"

#: tform7.button2.caption
msgctxt "tform7.button2.caption"
msgid "Next"
msgstr "Дальше"

#: tform7.button3.caption
msgctxt "tform7.button3.caption"
msgid "Change pointer"
msgstr "Изменить указатель"

#: tform7.caption
msgid "Step 6"
msgstr "Шаг 6"

#: tform7.speedbutton1.caption
msgctxt "tform7.speedbutton1.caption"
msgid "Skip"
msgstr "Пропустить"

#: tform8.button1.caption
msgctxt "tform8.button1.caption"
msgid "Hit me"
msgstr "Удар"

#: tform8.button2.caption
msgctxt "tform8.button2.caption"
msgid "Next"
msgstr "Дальше"

#: tform8.caption
msgid "Step 7"
msgstr "Шаг 7"

#: tform8.label1.caption
msgctxt "tform8.label1.caption"
msgid "Health: 100"
msgstr "Здоровье: 100"

#: tform8.speedbutton1.caption
msgctxt "tform8.speedbutton1.caption"
msgid "Skip"
msgstr "Пропустить"

#: tform9.button1.caption
msgctxt "tform9.button1.caption"
msgid "Change value"
msgstr "Изменить значение"

#: tform9.button2.caption
msgctxt "tform9.button2.caption"
msgid "Next"
msgstr "Дальше"

#: tform9.button3.caption
msgctxt "tform9.button3.caption"
msgid "Change pointer"
msgstr "Изменить указатель"

#: tform9.caption
msgid "Step 8"
msgstr "Шаг 8"

#: tform9.speedbutton1.caption
msgctxt "tform9.speedbutton1.caption"
msgid "Skip"
msgstr "Пропустить"

#: tfrmhelp.caption
msgid "Help"
msgstr "Помощь"

#: tfrmhelp.image1.hint
msgid "More information like videos for this step and written tutorials"
msgstr "Дополнительная информация, например, видеоролики по этому шагу или письменные руководства"

#: unit1.rsfirststeptoohardbettergiveupnow
msgid "First step too hard? Go to forum.cheatengine.org, then click on \"Tutorials\" for helpful guides!"
msgstr "Первый шаг слишком сложен? Зайдите на forum.cheatengine.org в раздел «Cheat Engine Tutorials», где вы можете найти много полезных руководств!"

#: unit1.rstutorial1
msgid ""
"Welcome to the Cheat Engine Tutorial (v3.6)\n"
"\n"
"This tutorial will teach you the basics of cheating in video games. It will also show you foundational aspects of using Cheat Engine (or CE for short). Follow the steps below to get started.\n"
"\n"
"1: Open Cheat Engine if it currently isn't running.\n"
"2: Click on the \"Open Process\" icon (it's the top-left icon with the computer on it, below \"File\".).\n"
"3: With the Process List window now open, look for this tutorial's process in the list. It will look something like \"00001F98-Tutorial-x86_64.exe\" or \"0000047C-Tutorial-i386.exe\". (The first 8 numbers/letters will probably be different.)\n"
"4: Once you've found the process, click on it to select it, then click the \"Open\" button. (Don't worry about all the other buttons right now. You can learn about them later if you're interested.)\n"
"\n"
"Congratulations! If you did everything correctly, the process window should be gone with Cheat Engine now attached to the tutorial (you will see the process name towards the top-center of CE).\n"
"\n"
"Click the \"Next\" button below to continue, or fill in the password and click the \"OK\" button to proceed to that step.)\n"
"\n"
"If you're having problems, simply head over to forum.cheatengine.org, then click on \"Tutorials\" to view beginner-friendly guides!"
msgstr ""
"Добро пожаловать в учебное руководство Cheat Engine\n"
"\n"
"Это учебное руководство научит вас основам читерства в видеоиграх. Оно также покажет вам основополагающие аспекты использования Cheat Engine. Выполните шаги ниже, чтобы начать обучение.\n"
"\n"
"1: Откройте Cheat Engine, если он не запущен в данный момент.\n"
"2: Нажмите на иконку «Выбор процесса для открытия» (иконка с изображением компьютера в верхнем левом углу, расположенная под «Файл».).\n"
"3: В окне «Список процессов» найдите и откройте процесс этого обучающего руководства. Он будет выглядеть как «00001F98-Tutorial-x86_64.exe» или «0000047C-Tutorial-i386.exe». (Первые 8 цифр/букв, скорее всего, будут отличаться.)\n"
"4: Как только вы нашли процесс, нажмите на него, чтобы его выделить, а затем нажмите на кнопку «Открыть». (Не обращайте сейчас внимания на другие кнопки. Вы можете узнать о них позднее, если вам будет интересно.)\n"
"\n"
"Поздравляю! Если вы всё сделали правильно, то окно с процессами, пропадёт, а Cheat Engine присоединиться к процессу обучающего руководства (вы увидите название процесса в верхней центральной части Cheat Engine).\n"
"\n"
"Нажмите на кнопку «Дальше» для продолжения или укажите пароль и нажмите «Подтвердить», чтобы приступить к определённому шагу.\n"
"\n"
"Если у вас возникли проблемы, просто зайдите на forum.cheatengine.org в раздел «Cheat Engine Tutorials», для просмотра руководств, ориентированных на новичков!"

#: unit10.rsdead
msgid "DEAD"
msgstr "МЁРТВ"

#: unit10.rsfailureyourteamdied
msgid "Failure. Your team died"
msgstr "Неудача. Ваша команда мертва"

#: unit10.rshealth
msgid "Health: %s"
msgstr "Здоровье: %s"

#: unit10.rsrestartgameandautoplay
msgctxt "unit10.rsrestartgameandautoplay"
msgid "Restart game and autoplay"
msgstr "Случайная игра"

#: unit10.rsstep9sharedcodepw
msgid "Step 9: Shared code: (PW=%s)"
msgstr "Шаг 9: Общий код: (пароль=%s)"

#: unit10.rsstop
msgid "Stop"
msgstr "Стоп"

#: unit10.rsthisplayerisalreadydeadrestartthegame
msgid "This player is already dead. Restart the game"
msgstr "Этот игрок уже мёртв. Перезапустите игру"

#: unit10.rstryagain10
msgid "Can't figure out how to do this? Don't worry. Try asking in the forum at cheatengine.org or perhaps someone already explained it better there. Are you sure you want to quit?"
msgstr ""
"Не можете разобраться? Не беспокойтесь, попробуйте спросить об этом на форуме cheatengine.org или, возможно, там уже кто-то это подробно объяснил.\n"
"Вы уверены, что хотите выйти?"

#: unit10.rstutorialstep9
msgid ""
"This step will explain how to deal with code that is used for other object of the same type\n"
"\n"
"Often when you've found health of a unit or your own player, you will find that if you remove the code, it affects enemies as well.\n"
"In these cases you must find out how to distinguish between your and the enemies objects.\n"
"Sometimes this is as easy as checking the first 4 bytes (Function pointer table) which often point to a unique location for the player, and sometimes it's a team number, or a pointer to a pointer to a pointer to a pointer to a pointer to a playername. It all depends on the complexity of the "
"game, and your luck\n"
"\n"
"The easiest method is finding what addresses the code you found writes to and then use the dissect data feature to compare against two structures. (Your unit(s)/player and the enemies) And then see if you can find out a way to distinguish between them.\n"
"When you have found out how to distinguish between you and the computer you can inject an assembler script that checks for the condition and then either do not execute the code or do something else. (One hit kills for example)\n"
"Alternatively, you can also use this to build a so called \"Array of byte\" string which you can use to search which will result in a list of all your or the enemies players\n"
"In this tutorial I have implemented the most amazing game you will ever play.\n"
"It has 4 players. 2 Players belong to your team, and 2 Players belong to the computer. \n"
"Your task is to find the code that writes the health and make it so you win the game WITHOUT freezing your health\n"
"To continue, press \"Restart game and autoplay\" to test that your code is correct\n"
"\n"
"\n"
"Tip: Health is a float\n"
"Tip2: There are multiple solutions"
msgstr ""
"Этот шаг научит вас работать с инструкцией, которую используют несколько объектов одного и того же типа.\n"
"\n"
"Часто бывает так, что вы делаете что-либо с инструкцией, работающей со здоровьем вашего игрока и тоже самое происходит со здоровьем врагов.\n"
"В таких случаях вам необходимо выяснить, как можно отличить вашего игрока от врагов.\n"
"Иногда это так же просто, как проверка первых четырёх байт структуры (Таблица указателей на функции), которые часто указывают на уникальное расположение для игрока, а иногда это номер команды (id), в которой состоит игрок, или указатель на указатель на указатель на указатель на указатель на "
"имя_игрока. Всё зависит от сложности игры и вашей удачи.\n"
"\n"
"Самый лёгкий метод - узнать в какие адреса записывает инструкция, определить начала структур (Вашего объекта/персонажа и вражеских) и попытаться найти различия между ними, воспользовавшись функцией «Анализ данных/структур».\n"
"Когда вы узнали, как отличить вашего игрока от компьютера, вы можете выполнить внедрение ассемблерного скрипта, в котором сначала сверяется условие (ваш ли это игрок/объект или вражеский), а затем либо просто выполняется оригинальный код, либо делается что-то ещё (например: убийство с одного "
"удара). Так же, вы можете использовать отличительные особенности структур для создания так называемой строки «Массива байт», поиск которой поможет найти структуры всех ваших или вражеских игроков/объектов.\n"
"\n"
"Специально для этого примера, я сделал самую классную игру из всех, в которые вы когда-либо играли. В ней присутствует 4 игрока: 2 игрока в вашей команде и 2 игрока в команде компьютера. Ваша задача состоит в том, чтобы найти инструкцию, которая пишет в адрес со значением здоровья и выиграть "
"игру БЕЗ замораживания здоровья ваших игроков.\n"
"Чтобы проверить работоспособность вашего скрипта, нажмите кнопку «Случайная игра»"
"\n"
"\n"
"Подсказка: Значение здоровья имеет тип Float\n"
"Подсказка 2: Данное задание можно решить несколькими способами."

#: unit10.rsu10thiswasthelasttutorial
msgid "This was the last tutorial and you skipped it. You lose"
msgstr "Это был последний шаг и ты его пропустил. Ты проиграл"

#: unit2.rsawyouredeathletmereviveyou
msgctxt "unit2.rsawyouredeathletmereviveyou"
msgid "Aw, you're dead! Let me revive you"
msgstr "Вы умерли! Позвольте вас оживить"

#: unit2.rsloser
msgctxt "unit2.rsloser"
msgid "BOO"
msgstr "БУ!"

#: unit2.rsquittingonstep2thisistheeasieststepthereisfindheal
msgid "Quitting on step2? This is the easiest step there is. Find health, change health, done.... Sure you want to quit?"
msgstr ""
"Сдаётесь уже сейчас? Это самый простой шаг из всех. Просто найдите значение здоровья, измените его и готово...\n"
"Вы уверены, что хотите выйти?"

#: unit2.rsstep2exactvaluescanningpw
msgid "Step 2: Exact Value scanning (PW="
msgstr "Шаг 2: Поиск точного значения (пароль="

#: unit2.rstutorialstep2
msgid ""
"Now that you have opened the tutorial with Cheat Engine let's get on with the next step.\n"
"\n"
"You can see at the bottom of this window is the text Health: xxx\n"
"Each time you click 'Hit me'  your health gets decreased.\n"
"\n"
"To get to the next step you have to find this value and change it to 1000\n"
"\n"
"To find the value there are different ways, but I'll tell you about the easiest, 'Exact Value':\n"
"First make sure value type is set to at least 2-bytes or 4-bytes. 1-byte will also work, but you'll run into an easy to fix problem when you've found the address and want to change it. The 8-byte may perhaps works if the bytes after the address are 0, but I wouldn't take the bet.\n"
"Single, double, and the other scans just don't work, because they store the value in a different way.\n"
"\n"
"When the value type is set correctly, make sure the scantype is set to 'Exact Value'\n"
"Then fill in the number your health is in the value box. And click 'First Scan'\n"
"After a while (if you have an extremely slow pc) the scan is done and the results are shown in the list on the left.\n"
"\n"
"If you find more than 1 address and you don't know for sure which address it is, click 'Hit me', fill in the new health value into the value box, and click 'Next Scan'\n"
"repeat this until you're sure you've found it. (that includes that there's only 1 address in the list.....)\n"
"\n"
"Now double click the address in the list on the left. This makes the address pop-up in the list at the bottom, showing you the current value.\n"
"Double click the value, (or select it and press enter), and change the value to 1000.\n"
"\n"
"If everything went ok the Next button should become enabled, and you're ready for the next step.\n"
"\n"
"\n"
"Note:\n"
"If you did anything wrong while scanning, click \"New Scan\" and repeat the scanning again.\n"
"Also, try playing around with the value and click 'Hit me'."
msgstr ""
"Теперь, когда у вас открыты Cheat Engine и это учебное руководство, вы можете приступить к следующему шагу.\n"
"\n"
"В нижней части окна вы можете увидеть текст «Здоровье: ххх»\n"
"Каждый раз, когда вы нажимаете на кнопку «Удар», здоровье будет уменьшаться.\n"
"\n"
"Чтобы перейти к следующему шагу, вам необходимо найти значение здоровья и изменить его на 1000\n"
"\n"
"Это значение можно найти различными способами, но я расскажу вам о самом простом, «Точное значение»:\n"
"Для начала выберите тип значения «2 Байта» или «4 Байта». «1 Байт» тоже сгодится, но тогда вы не сможете изменить значение на «1000» (что можно легко исправить). Так же можно использовать и «8 Байт», но я не стал бы это делать.\n"
"Такие типы значения как «Float», «Double» и другие сейчас не сработают, т.к. в них значения хранятся по-другому.\n"
"\n"
"Теперь, когда тип значения был выбран правильно, убедитесь, что типом поиска указано «Точное значение».\n"
"Далее, укажите количество здоровья в поле «Значение» и нажмите кнопку «Поиск»\n"
"Через некоторое время (в зависимости от мощности вашего компьютера) поиск завершится, а его результаты появятся в виде списка, расположенного в левой части программы.\n"
"\n"
"Если в этом списке будет более одного адреса, и вы не знаете наверняка в каком из них хранится значение здоровья, то нажмите кнопку «Удар» ещё раз, введите новое значение здоровья в поле «Значение» и нажмите на кнопку «Отсев». Повторяйте данную процедуру пока не будете уверены, что нашли "
"нужный адрес. (или пока в списке не останется только 1 адрес...)\n"
"Теперь сделайте двойной клик по найденному адресу (или выделите его и нажмите клавишу «Enter») и поменяйте значение на 1000.\n"
"\n"
"Если всё сделано правильно, то вам станет доступна кнопка «Дальше» и вы сможете перейти к следующему шагу.\n"
"\n"
"\n"
"Примечание:\n"
"Если вы допустили какую-либо ошибку при поиске, то нажмите на кнопку «Нов. поиск» и проделайте все действия ещё раз.\n"
"Также попробуйте поиграть со значением и нажмите на кнопку «Удар»."

#: unit3.rsdead
msgid "Seems you've done it again! Let me get a replacement! (And restart your scan!)"
msgstr "Похоже, что полоска закончилась. Давайте я её восполню!"

#: unit3.rsloser
msgctxt "unit3.rsloser"
msgid "BOO"
msgstr "БУ!"

#: unit3.rsstep3unknowninitialvaluepw
msgid "Step 3: Unknown initial value (PW="
msgstr "Шаг 3: Неизвестное значение (пароль="

#: unit3.rstryagain3
msgid "Step 3 isn't really that hard. Just do a new scan, unkown initial value and then decreased value till you find it. Almost everyone gets past this one. Sure you want to quit?"
msgstr ""
"Шаг 3, на самом деле, не так сложен. Просто начните с поиска неизвестного значения, нажимайте на кнопку «Удар» и производите отсев по правилу «Значение уменьшилось» до тех пор, пока не найдёте нужный адрес. Почти все справляются с этим.\n"
"Вы уверены, что хотите выйти?"

#: unit3.rstutorialstep3
msgid ""
"Ok, seeing that you've figured out how to find a value using exact value let's move on to the next step.\n"
"\n"
"First things first though. Since you are doing a new scan, you have to click on New Scan first, to start a new scan. (You may think this is straighforward, but you'd be surprised how many people get stuck on that step) I won't be explaining this step again, so keep this in mind.\n"
"Now that you've started a new scan, let's continue.\n"
"\n"
"In the previous test we knew the initial value so we could do an exact value search, but now we have a status bar where we don't know the starting value.\n"
"We only know that the value is between 0 and 500. And each time you click 'Hit me' you lose some health. The amount you lose each time is shown above the status bar.\n"
"\n"
"Again there are several different ways to find the value. (like doing a decreased value by... scan), but I'll only explain the easiest. \"Unknown initial value\", and decreased value.\n"
"Because you don't know the value it is right now, exact value wont do any good, so choose as scantype 'Unknown initial value', again, the value type is 4-bytes. (Most windows apps use 4-bytes.) Click First scan and wait till it's done.\n"
"\n"
"When it is done click 'Hit me'. You'll lose some of your health. (the amount you lost shows for a few seconds and then disappears, but you don't need that)\n"
"Now go to Cheat Engine, and choose 'Decreased Value' and click 'Next Scan'\n"
"When that scan is done, click 'Hit me' again, and repeat the above till you only find a few. \n"
"\n"
"We know the value is between 0 and 500, so pick the one that is most likely the address we need, and add it to the list.\n"
"Now change the health to 5000, to proceed to the next step."
msgstr ""
"Хорошо, видимо вы разобрались с поиском точного значения, что позволило нам приступить к следующему шагу.\n"
"\n"
"Вначале о самом важном. Поскольку вы делаете новый поиск, то первым делом вам нужно нажать на кнопку «Нов. поиск», для того чтобы его начать (Вы можете подумать: «Это же очевидно». Но вы были бы удивлены, узнав как много людей застревает на этом шаге). Я не буду объяснять это снова, поэтому "
"имейте это в виду.\n"
"Теперь, когда вы начали новый поиск, давайте продолжим.\n"
"\n"
"В предыдущем шаге мы точно знали начальное значение, поэтому мы могли произвести поиск «Точного значения», но сейчас у нас есть только полоска, без каких-либо чисел.\n"
"Всё что нам известно, так это то, что значение находится в диапазоне от 0 до 500. И каждый раз, после нажатия на кнопку «Удар», теряется часть здоровья. Сколько именно - отображается над полоской.\n"
"\n"
"И тут есть несколько способов найти значение (например: выполняя отсев по правилу «Значение уменьшилось на...»), но я объясню вам самое простое. Будут использованы только два типа поиска - «Неизвестное значение» и «Значение уменьшилось».\n"
"Т.к прямо сейчас значение нам не известно, то от поиска «Точного значения» не будет никакой пользы, поэтому выберите «Неизвестное значение», а тип, как и в прошлый раз, «4 Байта» (большинство приложений Windows используют 4-байтовый тип).\n"
"Нажмите на кнопку «Поиск» и ждите его завершения.\n"
"\n"
"После завершения поиска нажмите на кнопку «Удар». Часть здоровья теряется (Потерянное количество будет отображаться над полоской в течении нескольких секунд, а затем исчезнет, но нам это значение и не нужно).\n"
"Теперь возвращайтесь в Cheat Engine, выберите «Значение уменьшилось» и нажмите «Отсев».\n"
"После завершения отсева снова нажмите на кнопку «Удар» и снова сделайте отсев по правилу «Значение уменьшилось». Повторяйте эти действия пока в списке не окажется один или чуть более адресов.\n"
"\n"
"Итак, нам известно, что значение находится в диапазоне от 0 до 500, поэтому, если в списке найденных адресов находится более одного адреса, то выберите более подходящий к данному диапазону и добавьте его в таблицу.\n"
"Изменение значения этого адреса на 5000 позволит вам перейти к следующему шагу."

#: unit5.rsconfirmclose5
msgid "Come on. This step is simple. For health do a float scan, and for ammo a double type. (don't forget to disable fastscan for double in this case) Just ignore the fact that it looks different because it has a \".\" in the value. You sure you want to quit?"
msgstr ""
"Да ладно, это же просто. Выполняйте поиск, используя тип данных «Float» для нахождения значения здоровья и «Double» для патрон. (Не забудьте отключить «Быстрый поиск» при поиске «Double» значения). Просто игнорируйте тот факт, что он выглядит по-другому, потому что у него есть «.» в значении.\n"
"Вы уверены, что хотите выйти?"

#: unit5.rsdead
msgid "I think you're dead!%sPress ok to become a brain eating zombie"
msgstr "Я думаю, вы умерли!%s Нажмите «Подтвердить», чтобы стать зомби, пожирающим мозги"

#: unit5.rsloser
msgctxt "unit5.rsloser"
msgid "BOO"
msgstr "БУ!"

#: unit5.rsoutofammo
msgid "Out of ammo!%sPress ok to stock up on some ammo"
msgstr "Патроны закончились!%s Нажмите «Подтвердить» для пополнения"

#: unit5.rsstep4floatingpointspw
msgid "Step 4: Floating points (PW="
msgstr "Шаг 4: Плавающие точки (пароль="

#: unit5.rstutorialstep4
msgid ""
"In the previous tutorial we used bytes to scan, but some games store information in so called 'floating point' notations. \n"
"(probably to prevent simple memory scanners from finding it the easy way)\n"
"a floating point is a value with some digits behind the point. (like 5.12 or 11321.1)\n"
"\n"
"Below you see your health and ammo. Both are stored as Floating point notations, but health is stored as a float and ammo is stored as a double.\n"
"Click on hit me to lose some health, and on shoot to decrease your ammo with 0.5\n"
" \n"
"You have to set BOTH values to 5000 or higher to proceed.\n"
"\n"
"Exact value scan will work fine here, but you may want to experiment with other types too.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Hint: It is recommended to disable \"Fast Scan\" for type double"
msgstr ""
"В предыдущем шаге мы искали только целые числа, но некоторые игры хранят значения в виде так называемого «числа с плавающей точкой» (вероятно, чтобы усложнить поиск для простых сканеров памяти). Число с плавающей точкой - это значение с некими цифрами после точки (например: 5.12 или 11321.1)\n"
"\n"
"В нижней части окна вы можете видеть количество вашего здоровья и патрон. Оба хранятся в виде чисел с плавающей точкой, только значение здоровья хранится как Float, а патрон - как Double.\n"
"При нажатии на кнопку «Удар» вы утратите часть здоровья, а при нажатии на кнопку «Огонь» количество патрон уменьшится на 0.5\n"
"\n"
"Чтобы перейти к следующему шагу, вам нужно изменить значение обоих параметров на 5000 или больше.\n"
"\n"
"Здесь отлично подойдет поиск точного значения, но вы можете поэкспериментировать и с другими типами.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Подсказка: Рекомендуется отключить «Быстрый поиск» при поиске значения с типом «Double»"

#: unit6.rsloser
msgctxt "unit6.rsloser"
msgid "BOO"
msgstr "БУ!"

#: unit6.rsstep5codefinderpw
msgid "Step 5: Code finder (PW=%s)"
msgstr "Шаг 5: Нахождение и подмена кода (пароль=%s)"

#: unit6.rstryagain6
msgid "This may look difficult, but it shouldn't be. Basically find health, right click health, find what overwrites it, change health, click replace, change health, done.  But don't feel down if you don't get it. At least you know the basics of memory scanning...  Are you sure you want to quit?"
msgstr ""
"Это может показаться трудным, но это не так. Найдите адрес со значением здоровья, кликните по нему правой кнопкой мыши, выясните что его перезаписывает, измените здоровье, замените всплывшую инструкцию на NOP, измените значение - готово.\n"
"Не расстраивайтесь, если у вас не получится. Как минимум, вы знаете основы поиска в памяти...\n"
"Вы уверены, что хотите выйти?"

#: unit6.rstutorialstep5
msgid ""
"Sometimes the location of a value is stored at changes, when you restart the game, or even while you're playing. In that case you can use 2 things to still make a table that works.\n"
"In this step I'll try to describe how to use the Code Finder function.\n"
"\n"
"The value down here will be at a different location each time you start the tutorial, so a normal entry in the address list wouldn't work.\n"
"First try to find the address. (You've got to this point so I assume you know how to do that.)\n"
"When you've found the address, right-click the address in Cheat Engine and choose \"Find out what writes to this address\". A window will pop up with an empty list.\n"
"Then click on the Change value button in this tutorial, and go back to Cheat Engine. If everything went right, there should be an address with assembler code there now.\n"
"Click it and choose the Replace option to replace it with code that does nothing. That will also add the code address to the code list in the Advanced Options window. (Which gets saved if you save your table.)\n"
"\n"
"Click on Stop, so the game will start running normal again, and click on Close to close the window.\n"
"Now, click on Change value, and if everything went right the Next button should become enabled.\n"
"\n"
"Note: When you're freezing the address with a high enough speed it may happen that Next becomes visible anyhow."
msgstr ""
"Иногда расположение значения меняется при перезапуске игры или даже во время самой игры. В таком случае, вы можете воспользоваться несколькими способами для создания рабочей таблицы. В этом шаге я попытаюсь описать способ нахождения и подмены кода.\n"
"\n"
"Адрес со значением, расположенным ниже, будет меняться при каждом перезапуске этой обучающей программы, поэтому просто нахождение адреса нам не поможет, т.к. в следующий раз он будет другим.\n"
"\n"
"Чтобы пройти этот шаг, нам нужно с помощью подмены кода сделать так, чтобы при нажатии на кнопку «Изменить значение» значение оставалось прежним.\n"
"\n"
"Для начала попробуйте найти адрес. (Думаю, к этому моменту, вы уже знаете как это сделать)\n"
"После того как вы нашли нужный адрес и добавили его в таблицу, нажмите на него правой кнопкой мыши, выберите и нажмите «Выяснить, что записывает по этому адресу». Откроется окно «Следующие инструкции записывают в ххххх» с пустым списком.\n"
"Теперь нажмите кнопку «Изменить значение» в этой обучающей руководстве, а затем снова вернитесь в Cheat Engine. Если всё сделано правильно, то в списке появится адрес с ассемблерной инструкцией.\n"
"Выделите её и нажмите на кнопку «Заменить на NOP», которая заменит выбранную инструкцию на NOP (NOP - инструкция процессора на языке ассемблера, которая предписывает ничего не делать), а также добавит адрес с этой инструкцией в список кодов, которые расположены в окне «Дополнительные "
"возможности». Если вы сохраните таблицу, то и этот список будет сохранён вместе с ней.\n"
"\n"
"Нажмите на кнопку «Остановить» и закройте окно «Следующие инструкции записывают в ххххх».\n"
"Теперь нажмите на кнопку «Изменить значение» и, если всё сделано правильно, кнопка «Дальше» станет доступна.\n"
"\n"
"Примечание: Если вы заморозите адрес с достаточно высокой скоростью, то может случится так, что кнопка «Дальше» также станет доступна"

#: unit6.rswelldoneyouscrewedupthetutorial
msgctxt "unit6.rswelldoneyouscrewedupthetutorial"
msgid "Well done, you screwed up the tutorial!!!!"
msgstr "Молодец, ты запорол учебное руководство!!!!"

#: unit7.rsdontfuckingfreezethepointer
msgid "I'm sorry, but freezing the pointer is not really a functional solution"
msgstr "Простите, но заморозка указателя - это не совсем функциональное решение"

#: unit7.rsloser
msgctxt "unit7.rsloser"
msgid "BOO"
msgstr "БУ!"

#: unit7.rsstep6pointerspw
msgid "Step 6: Pointers: (PW=%s)"
msgstr "Шаг 6: Указатели: (пароль=%s)"

#: unit7.rstryagain7
msgid "So, pointers are too difficult eh? Don't worry, try again later. For most beginners this is difficult to grasp. But I have to tell you it's a powerful feature if you learn to use it. Are you sure you want to quit?"
msgstr ""
"Неужели указатели так сложны? Не волнуйтесь, попробуйте ещё раз позже. Большинству новичкам трудно понять это сразу. Но я должен вам сказать, что это очень мощная функция, если вы научитесь её использовать.\n"
"Вы уверены, что хотите выйти?"

#: unit7.rstutorialstep6
msgid ""
"In the previous step I explained how to use the Code finder to handle changing locations. But that method alone makes it difficult to find the address to set the values you want.\n"
"That's why there are pointers:\n"
"\n"
"At the bottom you'll find 2 buttons. One will change the value, and the other changes the value AND the location of the value.\n"
"For this step you don't really need to know assembler, but it helps a lot if you do.\n"
"\n"
"First find the address of the value. When you've found it use the function to find out what accesses this address.\n"
"Change the value again, and an item will show up in the list. Double click that item. (or select and click on more info) and a new window will open with detailed information on what happened when the instruction ran.\n"
"If the assembler instruction doesn't have anything between a '[' and ']' then use another item in the list.\n"
"If it does it will say what it think will be the value of the pointer you need.\n"
"Go back to the main cheat engine window (you can keep this extra info window open if you want, but if you close it, remember what is between the '[' and ']' ) and do a 4 byte scan in hexadecimal for the value the extra info told you.\n"
"When done scanning it may return 1 or a few hundred addresses. Most of the time the address you need will be the smallest one. Now click on the \"Add Address Manually\" button and select the pointer checkbox.\n"
"\n"
"The window will change and allow you to type in the address of a pointer and an offset.\n"
"Fill in the address you just found. It can be in the form: \"Tutorial-i386.exe\"+xxxxxx (relative to the process), \n"
"or you can double click the address to add it to the address list and use the absolute address which appears there.\n"
"If the assembler instruction has a calculation (e.g: [esi+12]) at the end then type the value in that's at the end above the address field. This is the offset. Otherwise leave it 0. If it was a more complicated instruction look at the following calculation.\n"
"\n"
"Example of a more complicated instruction:\n"
"[EAX*2+EDX+00000310] eax=4C and edx=00801234.\n"
"In this case EDX would be the value the pointer has, and EAX*2+00000310 the offset, so the offset you'd fill in would be 2*4C+00000310=3A8. (This is all in hex, use calc.exe from Windows in Programmer mode to calculate hex values.)\n"
"\n"
"Back to the tutorial, click OK and the address will be added. If all went right the address will show P->xxxxxxx, with xxxxxxx being the address of the value you found. If that's not right, you've done something wrong.\n"
"Now, change the value using the pointer you added in to 5000 and click in the 'Active' coloumn to freeze it. Then click Change pointer, and if all went right the Next button will become visible.\n"
"\n"
"\n"
"extra:\n"
"You could also use the pointer scanner to find the pointer to this address. https://cheatengine.org/help/pointer-scan.htm"
msgstr ""
"В предыдущем шаге мы научились замораживать значение динамического адреса при помощи подмены кода, но тот метод не позволяет изменять само значение адреса когда захотим.\n"
"Вот почему есть указатели:\n"
"Внизу вы видите две кнопки. Одна изменяет значение, а другая изменяет и само значение, и адрес в котором оно хранится.\n"
"На данном этапе знание ассемблера не обязательно, но оно бы вам очень помогло.\n"
"\n"
"Для начала найдите адрес со значением. После того как вы его нашли, используйте функцию «Выяснить, что обращается к этому адресу»."
"Теперь измените значение нажатием кнопки «Изменить значение» в обучающем руководстве и в появившимся окне Cheat Engine, вы увидите список с ассемблерными инструкциями. Сделайте двойной клик по ней (или выделите инструкцию и нажмите на кнопку «Дополнительная информация») и появится новое окно с "
"детальной информацией о том, что произошло при срабатывании этой инструкции.\n"
"Если в ассемблерной инструкции нет квадратных скобок «[» и «]», то выберите другую инструкцию из списка.\n"
"Если они есть, то в данном окне будет отображено вероятное значение указателя.\n"
"Вернитесь в главное окно Cheat Engine и начните поиск значения, которое вы скопировали из «Вероятное значение указателя, нужное для нахождения этого адреса:» или чуть ниже, где отображено состояние регистров (если инструкция имеет вид «mov [edx],eax», то смотрите значение регистра «edx»). "
"Выберите тип данных «4 Байта» и поставьте галочку напротив «Hex», т.к. это значение отображено в шестнадцатеричном виде. Поиск может завершится нахождением одного или нескольких сотен адресов. В большинстве случаев, адресов находится не очень много. Теперь нажмите на кнопку «Добавить адрес» и, "
"в появившемся окне, поставьте галочку напротив «Указатель».\n"
"\n"
"Окно добавления адреса изменится и мы можем заполнить указатель и смещение.\n"
"В качестве адреса укажите только что найденный адрес. Он может быть в виде: «Tutorial-i386.exe» + xxxxxx (в зависимости от названия процесса),\n"
"или вы можете кликнуть дважды по адресу для его добавления в таблицу и использовать абсолютный адрес, который появится там.\n"
"Если ассемблерная инструкция содержит вычисление (например: [esi+12]), то в качестве смещения укажите число 12. В противном случае (если просто [esi]) оставьте 0.\n"
"Ассемблерная инструкция может иметь и более сложные вычисления.\n"
"\n"
"Например:\n"
"[EAX*2+EDX+00000310], где eax=4C, а edx=00801234.\n"
"В данном случае, «EDX» будет хранить значение указателя, а «EAX*2+00000310» будет хранить смещение, которое можно узнать, выполнив вычисление при помощи Windows-калькулятора в инженерном режиме (2*4C+00000310=3A8).\n"
"(На системах выше Windows XP, вместо инженерного режима, нужно использовать режим программиста.)\n"
"\n"
"Но вернёмся обратно к нашему уроку.\n"
"В окне «Добавить адрес» вы уже ввели указатель и смещение, поэтому нажмите кнопку «Подтвердить». В таблицу Cheat Engine добавится адрес, который будет отображен в виде «У-> xxxxxxx», где «xxxxxxx» - текущий адрес со значением. Если значение этого адреса отличается, то вы сделали что-то не "
"правильно.\n"
"Теперь измените значение добавленного вами адреса на 5000 и установите флажок в столбце «Актив.» чтобы заморозьте его. Если всё сделано правильно, то после нажатия на кнопку «Изменить указатель» станет доступна кнопка «Дальше».\n"
"\n"
"\n"
"Дополнение:\n"
"Вы также можете воспользоваться сканером указателей, чтобы найти указатель на этот адрес. https://cheatengine.org/help/pointer-scan.htm"

#: unit7.rswelldoneyouscrewedupthetutorial
msgctxt "unit7.rswelldoneyouscrewedupthetutorial"
msgid "Well done, you screwed up the tutorial!!!!"
msgstr "Молодец, ты испортил учебное руководство!!!!"

#: unit7.rsyouvegotsecondslefttochangethevalueto5000
msgid "You have %s second%s left to change the value to 5000"
msgstr "У вас осталось %s секунд, чтобы изменить значение на 5000"

#: unit8.rsawyouredeathletmereviveyou
msgctxt "unit8.rsawyouredeathletmereviveyou"
msgid "Aw, you're dead! Let me revive you"
msgstr "Вы умерли! Позвольте вас оживить"

#: unit8.rshealth
msgid "Health"
msgstr "Здоровье"

#: unit8.rsloser
msgctxt "unit8.rsloser"
msgid "BOO"
msgstr "БУ!"

#: unit8.rsstep7codeinjectionpw
msgid "Step 7: Code Injection: (PW=%s)"
msgstr "Шаг 7: Внедрение кода: (пароль=%s)"

#: unit8.rstryagain8
msgid "Code injections too tough? No problem, memory scanning and basic pointers should be enough to get you experienced enough and you can always try the tutorial later. Are you sure you want to quit?"
msgstr ""
"Внедрение кода кажется слишком трудной? Не беда, умение находить значения и простые указатели говорит о том, что вы уже достаточно опытны, и вы всегда можете попытаться пройти этот шаг ещё раз.\n"
"Вы уверены, что хотите выйти?"

#: unit8.rstutorialstep7
msgid ""
"Code injection is a technique where you inject a piece of code into the target process, and then reroute the execution of code to go through your own written code.\n"
"\n"
"In this tutorial you'll have a health value and a button that will decrease your health by 1 each time you click it.\n"
"Your task is to use code injection to make the button increase your health by 2 each time it is clicked.\n"
"\n"
"Start with finding the address and then find what writes to it.\n"
"Then when you've found the code that decreases it browse to that address in the disassembler, and open the auto assembler window (Ctrl+A).\n"
"There click on template and then code injection, and give it the address that decreases health (if it isn't already filled in correctly).\n"
"That will generate a basic auto assembler injection framework you can use for your code.\n"
"\n"
"Notice the alloc, that will allocate a block of memory for your code cave, in the past, in the pre windows 2000 systems, people had to find code caves in the memory (regions of memory unused by the game), but that's luckily a thing of the past since windows 2000, and will these days cause "
"errors when trying to be used, due to SP2 of XP and the NX bit of new CPUs.\n"
"\n"
"Also notice the line newmem: and originalcode: and the text \"Place your code here\".\n"
"As you guessed it, write your code here that will increase the health with 2.\n"
"A useful assembler instruction in this case is the \"ADD instruction\".\n"
"\n"
"Here are a few examples:\n"
"\"ADD [00901234],9\" to increase the address at 00901234 with 9\n"
"\"ADD [ESP+4],9\" to increase the address pointed to by ESP+4 with 9\n"
"In this case, you'll have to use the same thing between the brackets as the original code has that decreases your health.\n"
"\n"
"Notice:\n"
"It is recommended to delete the line that decreases your health from the original code section, else you'll have to increase your health with 3 (you increase with 3, the original code decreases with 1, so the end result is increase with 2), which might become confusing. But it's all up to you "
"and your programming.\n"
"\n"
"Notice 2:\n"
"In some games the original code can exist out of multiple instructions, and sometimes, not always, it might happen that a code at another place jumps into your jump instruction end will then cause unknown behavior. If that happens, you should usually look near that instruction and see the "
"jumps and fix it, or perhaps even choose to use a different address to do the code injection from. As long as you're able to figure out the address to change from inside your injected code."
msgstr ""
"Внедрение кода - это метод, при котором в выбранный процесс программы добавляется кусок кода с перенаправлением выполнения оригинального кода через добавленный вами код.\n"
"\n"
"На этом шаге у вас есть значение здоровья и кнопка для его уменьшения на 1.\n"
"Ваша задача состоит в том, чтобы использовать внедрение кода для увеличения значения здоровья на 2 при каждом нажатии на кнопку «Удар».\n"
"\n"
"Начните с нахождения адреса, а затем найдите то, что записывает по этому адресу\n"
"Когда вы нашли инструкцию, которая уменьшает его, перейдите в дизассемблер и откройте окно «Автоассемблер» (Ctrl+A).\n"
"Теперь нажмите на меню «Шаблон» -> «Внедрение кода» и в появившимся окне укажите адрес, по которому расположена ассемблерная инструкция, уменьшающая здоровье (Если правильный адрес ещё не заполнен, т.к. Cheat Engine автоматически указывает в этой строке адрес выделенной в отладчике "
"ассемблерной инструкции). Сгенерируется шаблон базового скрипта для внедрения, который вы можете использовать для добавления вашего кода.\n"
"\n"
"Обратите внимание на директиву «alloc», которая выделяет блок памяти под ваш код. Когда-то давно, ещё до выхода системы Windows 2000, людям приходилось самостоятельно находить неиспользуемую область памяти (так называемый «code cave») в игре, чтобы внедрить в неё свой код, но, к счастью, всё "
"это осталось в прошлом. В наши дни, вследствие выхода Пакет Обновления 2 для Windows XP и технологии NX-Bit у новых процессоров, использование «code cave» может привести к различным ошибкам.\n"
"Также обратите внимание на строки «newmem:», «originalcode:» и надпись «place your code here»\n"
"Как вы уже догадались, именно там, где находится эта надпись, и нужно ввести наш код, который будет увеличивать значение здоровья на «2».\n"
"Для этого нам на нужно воспользоваться арифметической командой «ADD»\n"
"Вот пару примеров:\n"
"«ADD [00901234],9» - прибавляет число 9 к значению по адресу 00901234 \n"
"«ADD [ESP+4],9» - прибавляет число 9 к значению по адресу, на который указывает ESP+4\n"
"В нашем случае, в качестве адреса нужно использовать тот же адрес, что находится между скобками в оригинальной ассемблерной инструкции, уменьшающей здоровье.\n"
"Примечание:\n"
"В этом случае, в асвтоассемблере рекомендуется удалить из секции «originalcode:» оригинальную инструкцию, уменьшающую здоровье. Иначе вам придётся увеличивать значение здоровья на 3 (Вы увеличиваете значение здоровья на 3, оригинальная инструкция уменьшает это значение на 1, в конечном итоге, "
"значение увеличится на 2), что может вас немного запутать. Но всё это зависит только от вас и вашего уровня программирования.\n"
"\n"
"Примечание 2:\n"
"В некоторых играх ассемблерный код, выполняющий действие с каким-либо значением в игре, может состоять из нескольких частей, находящихся в разных местах. И если вы сделаете внедрение в такой код, то иногда, правда редко, это может привести к тому, что код из другого места прыгнет в конец "
"поставленного вами прыжка, на ваш «code cave», в котором расположен ваш чит, что может привести к непредсказуемым действиям. В таких случаях необходимо просмотреть код рядом с тем местом, куда вы делаете внедрение, проверить все переходы и поправить их или попробовать использовать другую "
"инструкцию, находящуюся рядом, для выполнения внедрения."

#: unit9.rsloser
msgctxt "unit9.rsloser"
msgid "BOO"
msgstr "БУ!"

#: unit9.rsstep8multilevelpointerspw
msgid "Step 8: Multilevel pointers: (PW=%s)"
msgstr "Шаг 8: Многоуровневые указатели: (пароль=%s)"

#: unit9.rstryagain9
msgid "Aw, you've almost reached the end. But don't worry, multilevel pointers can be a real pain when dealing with. If you get more experienced someday you can try it again. Are you sure you want to quit?"
msgstr ""
"Эх, вы ведь почти подошли к концу обучения. Но не волнуйтесь, когда дело доходит до многоуровневых указателей - это может быть реальной головной болью. Однажды вы станете намного опытнее и сможете попытаться пройти этот шаг ещё раз.\n"
"Вы действительно хотите выйти?"

#: unit9.rstutorialstep8
msgid ""
"This step will explain how to use multi-level pointers.\n"
"In step 6 you had a simple level-1 pointer, with the first address found already being the real base address.\n"
"This step however is a level-4 pointer. It has a pointer to a pointer to a pointer to a pointer to a pointer to the health.\n"
"\n"
"You basicly do the same as in step 6. Find out what accesses the value, look at the instruction and what probably is the base pointer value, and what is the offset, and already fill that in or write it down. But in this case the address you'll find will also be a pointer. You just have to find "
"out the pointer to that pointer exactly the same way as you did with the value. Find out what accesses that address you found, look at the assembler instruction, note the probable instruction and offset, and use that.\n"
"And continue till you can't get any further (usually when the base address is a static address, shown up as green.)\n"
"\n"
"Click Change Value to let the tutorial access the health.\n"
"If you think you've found the pointer path click Change Register. The pointers and value will then change and you'll have 3 seconds to freeze the address to 5000.\n"
"\n"
"Extra: This problem can also be solved using an auto assembler script, or using the pointer scanner.\n"
"Extra2: In some situations it is recommended to change CE's Codefinder settings to Access violations when \n"
"encountering instructions like mov eax,[eax] since debug registers show it AFTER it was changed, making it hard to find out the value of the pointer.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Extra3: If you're still reading. You might notice that when looking at the assembler instructions that the pointer is being read and filled out in the same codeblock (same routine, if you know assembler, look up till the start of the routine). This doesn't always happen, but can be really "
"useful in finding a pointer when debugging is troublesome."
msgstr ""
"Этот шаг научит вас нахождению многоуровневых указателей.\n"
"В «Шаг 6» у вас был простой одноуровневый указатель, первый же найденный адрес и был реальным базовым адресом.\n"
"В этом шаге вы будете иметь дело с четырёхуровневым указателем, т.е. указатель на указатель на указатель на указатель на указатель адреса здоровья.\n"
"\n"
"В основном, вам нужно делать всё тоже самое, что и в «Шаг 6». Найдите адрес с нижеуказанным значением, нажмите «Найти инструкции, обращающиеся к этому адресу», измените значение с помощью кнопки «Изменить значение», взгляните на всплывшие инструкции, узнайте вероятное значение указателя и "
"смещение (последнее нужно запомнить или где-нибудь записать). Начните новый поиск, использовав предполагаемое значение указателя (не забудьте поставить галочку напротив «Hex»).\n"
"Вы нашли адрес. В данном случае, т.к. имеем дело с многоуровневым указателем, найденный адрес так же будет являться указателем. Теперь, аналогичным образом, вам нужно найти указатель на этот указатель. Поставьте на только что найденный адрес «Найти инструкции, обращающиеся к этому адресу», "
"измените значение, взгляните на всплывшие инструкции... И этот найденный адрес будет являться указателем на указатель. Продолжайте поиск, повторяя те же действия (не забывая запоминать/записывать смещения и их последовательность), пока в списке найденных адресов не появится адрес, окрашенный в "
"зелёный цвет.\n"
"Теперь нажмите в Cheat Engine на кнопку «Добавить адрес» и поставьте галку напротив «Указатель». В нижнем поле ввода укажите найденный адрес, окрашенный в зелёный цвет, а чуть выше укажите смещения (сверху вниз) в той последовательности, в которой вы их находили. В конечном итоге,  у вас в "
"таблице появится адрес вида «У-> xxxxxxx».\n"
"\n"
"Теперь измените значение адреса «У-> xxxxxxx» на 5000, заморозьте его и нажмите кнопку «Изменить указатель». Если вы нашли верную цепочку указателей, то кнопка «Дальше» станет доступна.\n"
"\n"
"Дополнение: Для решения этого шага можно воспользоваться и сканером указателей, для автоматического нахождения многоуровневого указателя, или вообще не искать их, а написать скрипт автоассемблера.\n"
"Дополнение 2: В некоторых ситуациях, когда вы имеете дело с инструкциями вида mov eax,[eax], рекомендуется изменить настройки «Определителя кода» на «Нарушение доступа», т.к. состояние регистров отладчика показывается только ПОСЛЕ выполнения инструкции, затрудняя поиск указателя\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Дополнение 3: Если вы всё ещё читаете. Вы можете заметить, что ассемблерные инструкции, считающие значение указателя и те, что заполняют это значение, находятся в одном и том же сегменте кода (в одном цикле кода, если вы знаете ассемблер - поищите начало этого цикла). Такая ситуация возникает "
"не всегда, но может быть очень полезна при нахождении указателя, если отладка затруднена."

#: unit9.rsunrandomizerdetected
msgid "Unrandomizer detected"
msgstr "Обнаружен «Антирандомайзер»"

#: unit9.rsyouvegotsecondslefttochangethevalueto5000
msgid "You've got %s seconds left to change the value to 5000"
msgstr "У вас осталось %s секунд, чтобы изменить значение на 5000"
